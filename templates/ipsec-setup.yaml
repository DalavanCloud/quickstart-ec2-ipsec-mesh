#
# Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# ===========================
# NO CHANGE SHOUD BE REQUIRED
# ===========================
#
#

AWSTemplateFormatVersion: 2010-09-09
Description: Components for IPSec Mesh, certificate generation, EC2 ipsec configration, metrics and cert renew
Parameters:

  S3CaBucket:
    Type: String
    Description: CA bucket with CA key and certificate. Keys are constant ca.cert.pem and ce.key.encrypted.pem
                 Password must be provided and encrypted in Lambda env parameters
    Default: ''

  S3UserCertsBucket:
    Type: String
    Description: User certs bucket where the cert will be published
    Default: ''

  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets.
      Only change this value if you customize or extend the Quick Start for your own use.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String

  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*[/]$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/) and must terminate in a forward slash.
    Default: quickstart-ec2-ipsec-mesh/
    Description: >-
      S3 key prefix for the Quick Start assets.
      Only change this value if you customize or extend the Quick Start for your own use.
      Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-),
      and forward slash (/) and must terminate in a forward slash.
    Type: String

  VpcId:
    Type: String
    Description: Provide the vpc-id if you want restict the provisioning
    Default: 'any'

Conditions:

  CreateCaS3Bucket: !Not
    - !Equals
        - ''
        - !Ref 'S3CaBucket'

  CreateUserCertsS3Bucket: !Not
    - !Equals
        - ''
        - !Ref 'S3UserCertsBucket'

Resources:

  IPSecLambdaConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []

  CopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'IPSecLambdaConfigBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/enroll_cert_lambda_function/enroll_cert_lambda_function.zip
        - functions/packages/generate_certifcate_lambda_function/generate_certifcate_lambda_function.zip
        - functions/packages/ipsec_setup_lambda_function/ipsec_setup_lambda_function.zip
        - config/clear
        - config/clear-or-private
        - config/oe-cert.conf
        - config/private
        - config/private-or-clear
          # no sure if we need to copy the sources     
        - sources/cron.txt
        - sources/cronIPSecStats.sh
        - sources/setup_ipsec.sh  

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${IPSecLambdaConfigBucket}/${QSS3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  CaBucket:
    Type: AWS::S3::Bucket
    Condition: CreateCaS3Bucket
    Properties:
      Tags: []

  UserCertsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateUserCertsS3Bucket
    Properties:
      Tags: []

  DecryptCaKeyEncryptUserP12Policy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "DecryptCaKeyEncryptP12Pwd-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Action:
              - 'kms:Decrypt'
            Effect: 'Allow'
            Resource:
                    - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${AWS::StackName}-CA"
          -
            Action:
              - 'kms:Encrypt'
            Effect: 'Allow'
            Resource:
                    - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${AWS::StackName}-USER"
          -
            Action:
              - 'kms:GenerateRandom'
            Effect: 'Allow'
            Resource: '*'
          -
            Action:
              - 'ec2:DescribeInstances'
            Effect: 'Allow'
            Resource:  '*'
                    

  Ec2IPSecInstancePolicy:
    DependsOn:
        - generateCertificateBundle 
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "Ec2IPsec-${AWS::StackName}Instance"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Action:
            - 'kms:Decrypt'
            Effect: 'Allow'
            Resource:
              - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${AWS::StackName}-USER"
          -
            Action:
                    - 'cloudwatch:PutMetricData'
            Effect: 'Allow'
            Resource: '*'
  
  LambdaIPSecPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "LambdaIPSec-${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Action:
                - 'ssm:SendCommand'
                - 's3:GetObject'
                - 'ssm:ListCommands'
                - 'ssm:DescribeInstanceInformation'
                - 'lambda:InvokeFunction' 
                - 'ec2:DescribeInstances'
            Effect: 'Allow'
            Resource:  '*'
          -
            Action:
                - 'ec2:DeleteTags'
                - 'ec2:CreateTags'
            Effect: 'Allow'
            Resource:  'arn:aws:ec2:*:*:instance/*'

  Ec2Role:
    DependsOn:
      - Ec2IPSecInstancePolicy 
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "Ec2IPsec-${AWS::StackName}"
      Path: /
      AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
              Effect: Allow
              Principal:
                 Service: "ec2.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - Ref: Ec2IPSecInstancePolicy
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"

  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
       Path: "/"
       Roles: 
          - Ref: Ec2Role
       InstanceProfileName: !Sub "Ec2IPsec-${AWS::StackName}"      

  CaLambdaRole:
    DependsOn:
      - DecryptCaKeyEncryptUserP12Policy
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "GenerateCertificate-${AWS::StackName}"
      Path: /
      AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
              Effect: Allow
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - Ref: DecryptCaKeyEncryptUserP12Policy

  IPSecLambdaRole:
    DependsOn:
      - LambdaIPSecPolicy
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "IPSecLambda-${AWS::StackName}"
      Path: /
      AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
              Effect: Allow
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - Ref: LambdaIPSecPolicy

  CaKmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: Protects the CA key
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-10
        Statement:
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: ['kms:Create*', 'kms:Describe*', 'kms:Enable*', 'kms:List*', 'kms:Put*',
            'kms:Update*', 'kms:Revoke*', 'kms:Disable*', 'kms:Get*', 'kms:Delete*',
            'kms:ScheduleKeyDeletion', 'kms:CancelKeyDeletion']
          Resource: '*'
        - Sid: Use of the key
          Effect: Allow
          Principal:
            AWS: !GetAtt CaLambdaRole.Arn
          Action: [ 'kms:Decrypt', 'kms:GenerateDataKey*', 'kms:DescribeKey']
          Resource: '*'
        - Sid: Allow local use 
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: ['kms:Encrypt', 'kms:GenerateDataKey*', 'kms:DescribeKey']
          Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

  CaKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-CA"
      TargetKeyId: !Ref CaKmsKey

  UserKmsKey:
    Type: "AWS::KMS::Key"
    DependsOn:
      - CaLambdaRole
      - Ec2Role
    Properties:
      Description: Protects the User key
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-10
        Statement:
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: ['kms:Create*', 'kms:Describe*', 'kms:Enable*', 'kms:List*', 'kms:Put*',
            'kms:Update*', 'kms:Revoke*', 'kms:Disable*', 'kms:Get*', 'kms:Delete*',
            'kms:ScheduleKeyDeletion', 'kms:CancelKeyDeletion']
          Resource: '*'
        - Sid: Use of the key by EC2
          Effect: Allow
          Principal:
            AWS: !GetAtt Ec2Role.Arn
          Action: ['kms:Decrypt' ]
          Resource: '*'
        - Sid: Use of the key ID Lambda cert issuer
          Effect: Allow
          Principal:
            AWS: !GetAtt CaLambdaRole.Arn
          Action: ['kms:Encrypt', 'kms:GenerateRandom' ]
          Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

  UserKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-USER"
      TargetKeyId: !Ref UserKmsKey

  generateCertificateBundle:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - CaLambdaRole
      - CaKmsKey
      - CopyZips
    Properties:
      FunctionName: !Sub "GenerateCertificate-${AWS::StackName}"
      Handler: generate_certifcate_lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref 'IPSecLambdaConfigBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/generate_certifcate_lambda_function/generate_certifcate_lambda_function.zip'
      Description: 'Generates certificates'
      MemorySize:  256
      Timeout: 30
      Role: !GetAtt CaLambdaRole.Arn
      Environment:
        Variables:
          CA_BUCKET:
            Fn::If:
              - CreateCaS3Bucket
              - !Ref CaBucket
              - !Ref S3CaBucket
          CA_FILE: ca.cert.pem
          CA_KEY_FILE: ca.key.encrypted.pem
          CA_PWD: "Put yourCA key password here"
          CERTS_BUCKET:
            Fn::If:
              - CreateUserCertsS3Bucket
              - !Ref UserCertsBucket
              - !Ref S3UserCertsBucket
          P12_CMS_KEYID: !Sub "alias/${AWS::StackName}-USER"

  IPSecSetupLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - IPSecLambdaRole
      - CopyZips
    Properties:
      FunctionName: !Sub "IPSecSetup-${AWS::StackName}"
      Handler: ipsec_setup_lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref 'IPSecLambdaConfigBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/ipsec_setup_lambda_function/ipsec_setup_lambda_function.zip'
      Description: 'Configures IPSec and certificate on EC2 over SSM'
      MemorySize:  320
      Timeout: 180
      Role: !GetAtt IPSecLambdaRole.Arn
      Environment:
        Variables:
          CertificateEnrollLambda: !Sub "GenerateCertificate-${AWS::StackName}"
          IPSecSetUpScript: setup_ipsec.sh
          ResultTagValue: enabled
          SelectorTagName: IPSec
          SelectorTagValue: todo
          VpcId:
            Ref: VpcId
          SourceBucket:
            Ref: IPSecLambdaConfigBucket

  enrollCertLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - IPSecLambdaRole
      - CopyZips
    Properties:
      FunctionName: !Sub "ReenrollCertificate-${AWS::StackName}"
      Handler: enroll_cert_lambda_function.lambda_handler
      Runtime: python3.6
      Code:
        S3Bucket: !Ref 'IPSecLambdaConfigBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/enroll_cert_lambda_function/enroll_cert_lambda_function.zip'
      Description: 'Enrolls certifcate on EC2 over SSM'
      MemorySize:  320
      Timeout: 300
      Role: !GetAtt IPSecLambdaRole.Arn
      Environment:
        Variables:
          IPSecSetupLambda: !Sub "IPSecSetup-${AWS::StackName}"
          SelectorTagName: IPSec
          SelectorTagValue: enabled
          SourceBucket:
            Ref: IPSecLambdaConfigBucket

  eventIPSecSetup:
     DependsOn:
        - IPSecSetupLambda
     Type: "AWS::Events::Rule"
     Properties:
       Description: Instance moved to state running trigger IPSec setup 
       Name: !Sub "SetupIPSecOnEC2-${AWS::StackName}"       
       EventPattern: 
         detail-type:
            - EC2 Instance State-change Notification
         source:
            - aws.ec2
         detail:
           state:
            - running
       State: "ENABLED"
       Targets: 
           - 
             Arn: 
               !GetAtt IPSecSetupLambda.Arn
             Id: 'IPSecSetup'    

  PermissionForEventsIPSecSetup: 
     Type: "AWS::Lambda::Permission"
     Properties: 
        FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:IPSecSetup-${AWS::StackName}"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn:  !GetAtt eventIPSecSetup.Arn

  eventCertEnroll:
     DependsOn:
             - enrollCertLambda
     Type: "AWS::Events::Rule"
     Properties:
       Description: Schadule re-renollment of certificate
       Name: !Sub "ReenrollCertificate-${AWS::StackName}"
       ScheduleExpression: cron(2 * ? * 4 *)
       State: "ENABLED"
       Targets: 
           - 
            Arn: !GetAtt enrollCertLambda.Arn
            Id: 'enrollCertLambda'    
    
  PermissionForEventsEnrollCert: 
     Type: "AWS::Lambda::Permission"
     Properties: 
        FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReenrollCertificate-${AWS::StackName}"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn:  !GetAtt eventCertEnroll.Arn

  Alerts: 
     Type: "AWS::SNS::Topic"
     Properties: 
       TopicName: !Sub "IPSec_Config_Alarms_${AWS::StackName}"

  IPSecConfAlarm:
     Type: AWS::CloudWatch::Alarm
     Properties:
        AlarmDescription: "Alarm if IPSec confguration fails"
        AlarmName: !Sub "IPSec configuration (${AWS::StackName})"
        Namespace: AWS/Lambda
        MetricName: Errors
        Dimensions:
         - Name: FunctionName
           Value: !Ref IPSecSetupLambda
        Statistic: Sum
        Period: 3600
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching
        AlarmActions:           
         - !Ref Alerts

  CertEnrollConfAlarm:
     Type: AWS::CloudWatch::Alarm
     Properties:
        AlarmDescription: "Alarm if cert reenrollment fails"
        Namespace: AWS/Lambda
        AlarmName: !Sub "Cert reenrollment (${AWS::StackName})"
        MetricName: Errors
        Dimensions:
         - Name: FunctionName
           Value: !Ref enrollCertLambda
        Statistic: Sum
        Period: 3600
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching
        AlarmActions:           
         - !Ref Alerts

Outputs:
    CertEnrollLambda:
       Description: ARN of Lambda for certificate generation 
       Value: !GetAtt generateCertificateBundle.Arn
    CaKmsKey:
       Description: CA CMS Crypto key 
       Value: !GetAtt CaKmsKey.Arn
